{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport fetch from \"isomorphic-fetch\";\nimport Thoughts from \"../components/Thoughts\";\n\nvar Index = function Index(_ref) {\n  var thoughts = _ref.thoughts;\n  return /*#__PURE__*/_jsx(Container, {\n    children: /*#__PURE__*/_jsx(Thoughts, {\n      thoughts: thoughts\n    })\n  });\n};\n\n_c = Index;\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var req, baseURL, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            req = _ref2.req;\n            baseURL = req ? \"\".concat(req.protocol, \"://\").concat(req.get(\"Host\")) : \"\";\n            _context.next = 4;\n            return fetch(\"\".concat(baseURL, \"/api/thoughts\"));\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            _context.t0 = _context.sent;\n            return _context.abrupt(\"return\", {\n              thoughts: _context.t0\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/v.vozhdaienko/Desktop/VV-Imprivata/Volodymyr-Vozhdaienko-Imprivata/src/pages/index.tsx"],"names":["React","Container","fetch","Thoughts","Index","thoughts","getInitialProps","req","baseURL","protocol","get","res","json"],"mappings":";;;AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAOA,IAAMC,KAAuB,GAAI,SAA3BA,KAA2B,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC/C,sBACI,KAAC,SAAD;AAAA,2BACI,KAAC,QAAD;AAAU,MAAA,QAAQ,EAAEA;AAApB;AADJ,IADJ;AAKH,CAND;;KAAMD,K;;AAQNA,KAAK,CAACE,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,GAAT,SAASA,GAAT;AACdC,YAAAA,OADc,GACID,GAAG,aAAMA,GAAG,CAACE,QAAV,gBAAwBF,GAAG,CAACG,GAAJ,CAAQ,MAAR,CAAxB,IAA4C,EADnD;AAAA;AAAA,mBAEFR,KAAK,WAAIM,OAAJ,mBAFH;;AAAA;AAEdG,YAAAA,GAFc;AAAA;AAAA,mBAIAA,GAAG,CAACC,IAAJ,EAJA;;AAAA;AAAA;AAAA;AAIhBP,cAAAA,QAJgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAeD,KAAf","sourcesContent":["import React, {FC} from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport fetch from \"isomorphic-fetch\";\r\nimport Thoughts from \"../components/Thoughts\";\r\nimport {NextPage} from \"next\";\r\n\r\ninterface IProps {\r\n    thoughts: string[];\r\n}\r\n\r\nconst Index: NextPage<IProps>  = ({ thoughts }) => {\r\n    return (\r\n        <Container>\r\n            <Thoughts thoughts={thoughts} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nIndex.getInitialProps = async ({ req }: { req: { protocol: string; get: (value: string) => string } }) => {\r\n    const baseURL: string = req ? `${req.protocol}://${req.get(\"Host\")}` : \"\";\r\n    const res = await fetch(`${baseURL}/api/thoughts`);\r\n    return {\r\n        thoughts: await res.json()\r\n    };\r\n};\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}